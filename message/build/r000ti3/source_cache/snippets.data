<?xml version="1.0" encoding="UTF-8"?>
<snippets>
  <file name="/home/robin/share/code/message/build/../src/msg_link.c" md5="">
    <snippet line="625">
      <line line="622"/>
      <line line="623">  //new connection</line>
      <line line="624">  msg_link_t* new_link = (msg_link_t*)malloc(sizeof(msg_link_t));</line>
      <line line="625">  memset(new_link, 0, sizeof(msg_link_t));</line>
      <line line="626">  CHECK(NULL != new_link);</line>
    </snippet>
    <snippet line="459">
      <line line="456"/>
      <line line="457">  while(1) {</line>
      <line line="458">    lock(&amp;link-&gt;tx.tx_lock);</line>
      <line line="459">    if(list_empty(&amp;link-&gt;tx.msg_queue) ||</line>
      <line line="460">        sliding_window_is_full(link) ||</line>
    </snippet>
    <snippet line="644">
      <line line="641">    return GET_MSG_LINK_FAILED_EC;</line>
      <line line="642">  }</line>
      <line line="643">  tx_msg_enqueue(msg, msg_link);</line>
      <line line="644"/>
      <line line="645">  return SUCCESS_EC;</line>
    </snippet>
    <snippet line="945">
      <line line="942">    case PDU_ACK:</line>
      <line line="943">      if (LINK_STATUS_UP == link-&gt;status &amp;&amp; LINK_STATUS_UP == link-&gt;peer_status) {</line>
      <line line="944">        handle_ack(frag_ment, link);</line>
      <line line="945">      } else {</line>
      <line line="946">        LOG(INFO, "Data received from node %d, set peer state as usable.",</line>
    </snippet>
    <snippet line="460">
      <line line="457">  while(1) {</line>
      <line line="458">    lock(&amp;link-&gt;tx.tx_lock);</line>
      <line line="459">    if(list_empty(&amp;link-&gt;tx.msg_queue) ||</line>
      <line line="460">        sliding_window_is_full(link) ||</line>
      <line line="461">        link-&gt;status != LINK_STATUS_UP ||</line>
    </snippet>
    <snippet line="467">
      <line line="464">    }</line>
      <line line="465"/>
      <line line="466">    if(link-&gt;status != LINK_STATUS_UP || link-&gt;peer_status != LINK_STATUS_UP) {</line>
      <line line="467">      LOG(ERROR, "Link status is not ok for node %d", link-&gt;peer);</line>
      <line line="468">      unlock(&amp;link-&gt;tx.tx_lock);</line>
    </snippet>
    <snippet line="927">
      <line line="924">#endif</line>
      <line line="925">    case PDU_HB:</line>
      <line line="926">      handle_heartbeat(frag_ment, link);</line>
      <line line="927">      break;</line>
      <line line="928">    case PDU_HB_ACK:</line>
    </snippet>
    <snippet line="930">
      <line line="927">      break;</line>
      <line line="928">    case PDU_HB_ACK:</line>
      <line line="929">      handle_heartbeat_ack(frag_ment, link);</line>
      <line line="930">      break;</line>
      <line line="931">    case PDU_DATA:</line>
    </snippet>
  <snippet line="639"><line line="636">error_no_t send_msg_to_node(message_t* msg, node_id_t dest_node) {</line><line line="637">  msg_link_t* msg_link = NULL;</line><line line="638">  msg_link = get_msg_link(dest_node);</line><line line="639">  if(msg_link == NULL) {</line><line line="640">    LOG(WARNING, "Get msg link failed");</line></snippet></file>
  <file name="/home/robin/share/code/common/base/timerheap.c" md5="">
    <snippet line="261">
      <line line="258">  //size += 2;</line>
      <line line="259"/>
      <line line="260">  ht = malloc(sizeof(timer_heap_t));</line>
      <line line="261">  CHECK(NULL != ht);</line>
      <line line="262">  ht-&gt;max_size = size;</line>
    </snippet>
  </file>
  <file name="/home/robin/share/code/common/base/lock.c" md5="">
    <snippet line="31">
      <line line="28">  LOG(INFO, "Begin lock %p in thread %x at[%s:%d]", &amp;locker-&gt;locker, (uint32)pthread_self(), file, line);</line>
      <line line="29">  int32 ret = pthread_mutex_lock(&amp;locker-&gt;locker);</line>
      <line line="30">  locker-&gt;locked = TRUE;</line>
      <line line="31">  locker-&gt;locker_thread = pthread_self();</line>
      <line line="32">  sprintf(locker-&gt;locker_info, "[%s:%d]", file, line);</line>
    </snippet>
    <snippet line="42">
      <line line="39">  CHECK(0 == ret);</line>
      <line line="40">  LOG(INFO, "Unlock %p in thread %x at[%s:%d]", &amp;locker-&gt;locker, (uint32)pthread_self(), file, line);</line>
      <line line="41">  locker-&gt;locked = FALSE;</line>
      <line line="42">  locker-&gt;locker_thread = 0;</line>
      <line line="43">  memset(locker-&gt;locker_info, 0, 128);</line>
    </snippet>
    <snippet line="15">
      <line line="12">  rv = pthread_mutexattr_settype(&amp;mta, PTHREAD_MUTEX_ERRORCHECK);</line>
      <line line="13">  CHECK(rv == 0);</line>
      <line line="14">  rv = pthread_mutex_init(&amp;lock-&gt;locker, &amp;mta);</line>
      <line line="15">  CHECK(rv == 0);</line>
      <line line="16">  rv = pthread_mutexattr_destroy(&amp;mta);</line>
    </snippet>
    <snippet line="32">
      <line line="29">  int32 ret = pthread_mutex_lock(&amp;locker-&gt;locker);</line>
      <line line="30">  locker-&gt;locked = TRUE;</line>
      <line line="31">  locker-&gt;locker_thread = pthread_self();</line>
      <line line="32">  sprintf(locker-&gt;locker_info, "[%s:%d]", file, line);</line>
      <line line="33">  CHECK(0 == ret);</line>
    </snippet>
    <snippet line="43">
      <line line="40">  LOG(INFO, "Unlock %p in thread %x at[%s:%d]", &amp;locker-&gt;locker, (uint32)pthread_self(), file, line);</line>
      <line line="41">  locker-&gt;locked = FALSE;</line>
      <line line="42">  locker-&gt;locker_thread = 0;</line>
      <line line="43">  memset(locker-&gt;locker_info, 0, 128);</line>
      <line line="44">}</line>
    </snippet>
    <snippet line="44">
      <line line="41">  locker-&gt;locked = FALSE;</line>
      <line line="42">  locker-&gt;locker_thread = 0;</line>
      <line line="43">  memset(locker-&gt;locker_info, 0, 128);</line>
      <line line="44">}</line>
      <line line="45">#else</line>
    </snippet>
  </file>
  <file name="/home/robin/share/code/common/base/thread.c" md5="">
    <snippet line="19">
      <line line="16">  pthread_attr_init(&amp;attr);</line>
      <line line="17">  pthread_attr_getstacksize(&amp;attr, &amp;stack_size);</line>
      <line line="18">  LOG(ERROR, "Default stack size is %zd bytes", stack_size);</line>
      <line line="19">  stack_size = 16*1024*1024;</line>
      <line line="20">  pthread_attr_setstacksize(&amp;attr, stack_size);</line>
    </snippet>
    <snippet line="34">
      <line line="31">void thread_cond_init(pthread_cond_t* threshold) {</line>
      <line line="32">  CHECK(NULL != threshold);</line>
      <line line="33">  CHECK(0 == pthread_cond_init(threshold, NULL));</line>
      <line line="34">}</line>
      <line line="35"/>
    </snippet>
  </file>
</snippets>
